import { AMFlow } from "@akashic/amflow";
import * as g from "@akashic/akashic-engine";
import * as pdi from "@akashic/akashic-pdi";
import { ResourceFactory } from "./ResourceFactory";
import { ContainerController } from "./ContainerController";
import { AudioPluginManager } from "./plugin/AudioPluginManager";
import { AudioManager } from "./AudioManager";
import { AudioPluginStatic } from "./plugin/AudioPluginStatic";
export interface PlatformParameterObject {
    /**
     * このPlatformが使うAMFlowクライアント。
     * Platform#amflowに設定される。
     */
    amflow: AMFlow;
    /**
     * ビューのルートとなるHTMLElement。
     */
    containerView: HTMLElement;
    /**
     * ビュー上のpreventDefaultを無効化するか。
     * デフォルトではpreventDefaultされるが、それを無効にしたい場合に指定すること。
     *
     * 注意: touchstartが利用可能な環境においてこの値を真にする場合、
     * 利用者はtouchstart, touchmove, touchendに対して自力で `preventDefault()` を呼び出さなくてはならない。
     * これはタッチとマウスの両方をサポートする環境に対応するために必要である。
     * `preventDefault()` が呼び出されない場合、Webブラウザはタッチイベントに対してマウスイベントを生成することがある。
     * この時pdi-browserは一度のタッチで二度pointDownの処理を行ってしまう。
     * 詳細は https://w3c.github.io/touch-events/#mouse-events を参照のこと。
     */
    disablePreventDefault?: boolean;
    /**
     * オーディオプラグイン。
     * resourceFactory を指定した場合、無視される。
     */
    audioPlugins?: AudioPluginStatic[];
    /**
     * このPlatformが使うResourceFactory。
     * getResourceFactory()の戻り値として利用される。
     * 指定されなかった場合、デフォルトの実装が生成される。指定された場合、audioPlugins は無視される。
     */
    resourceFactory?: ResourceFactory;
}
export declare class Platform implements pdi.Platform {
    containerView: HTMLElement;
    containerController: ContainerController;
    audioPluginManager: AudioPluginManager;
    amflow: AMFlow;
    _platformEventHandler: pdi.PlatformEventHandler;
    _resourceFactory: ResourceFactory;
    _rendererReq: pdi.RendererRequirement;
    _disablePreventDefault: boolean;
    _audioManager: AudioManager;
    constructor(param: PlatformParameterObject);
    setPlatformEventHandler(handler: pdi.PlatformEventHandler): void;
    loadGameConfiguration(url: string, callback: (err: any, configuration: any) => void): void;
    getResourceFactory(): g.ResourceFactory;
    setRendererRequirement(requirement?: pdi.RendererRequirement): void;
    getPrimarySurface(): g.Surface;
    getOperationPluginViewInfo(): g.OperationPluginViewInfo;
    createLooper(fun: (deltaTime: number) => number): pdi.Looper;
    sendToExternal(playId: string, data: any): void;
    registerAudioPlugins(plugins: AudioPluginStatic[]): boolean;
    setScale(xScale: number, yScale: number): void;
    notifyViewMoved(): void;
    /**
     * 最終的に出力されるマスター音量を変更する
     *
     * @param volume マスター音量
     */
    setMasterVolume(volume: number): void;
    /**
     * 最終的に出力されるマスター音量を取得する
     */
    getMasterVolume(): number;
    destroy(): void;
}
