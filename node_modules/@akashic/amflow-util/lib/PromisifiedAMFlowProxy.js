"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PromisifiedAMFlowProxy = void 0;
/**
 * 引数に渡された AMFlow 実装の非同期関数を Promise でラップしたクラス
 */
var PromisifiedAMFlowProxy = /** @class */ (function () {
    function PromisifiedAMFlowProxy(amflow) {
        this._amflow = amflow;
    }
    PromisifiedAMFlowProxy.prototype.open = function (playId) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._amflow.open(playId, function (err) { return (err ? reject(err) : resolve()); });
        });
    };
    PromisifiedAMFlowProxy.prototype.close = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._amflow.close(function (err) { return (err ? reject(err) : resolve()); });
        });
    };
    PromisifiedAMFlowProxy.prototype.authenticate = function (token) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._amflow.authenticate(token, function (err, perm) { return (err ? reject(err) : resolve(perm)); });
        });
    };
    PromisifiedAMFlowProxy.prototype.getTickList = function (optsOrBegin, endOrUndefined) {
        var _this = this;
        if (typeof optsOrBegin === "number") {
            // NOTE: optsOrBegin === "number" であれば必ず amflow@2 以前の引数だとみなしてキャストし、2 系の引数形で呼び出す
            var begin_1 = optsOrBegin;
            var end_1 = endOrUndefined;
            return new Promise(function (resolve, reject) {
                _this._amflow.getTickList(begin_1, end_1, function (err, tl) { return (err ? reject(err) : resolve(tl)); });
            });
        }
        else {
            // NOTE: optsOrBegin !== "number" であれば必ず amflow@3 以降の引数だとみなす
            var opts_1 = optsOrBegin;
            return new Promise(function (resolve, reject) {
                _this._amflow.getTickList(opts_1, function (err, tl) { return (err ? reject(err) : resolve(tl)); });
            });
        }
    };
    PromisifiedAMFlowProxy.prototype.putStartPoint = function (startPoint) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._amflow.putStartPoint(startPoint, function (err) { return (err ? reject(err) : resolve()); });
        });
    };
    PromisifiedAMFlowProxy.prototype.getStartPoint = function (opts) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._amflow.getStartPoint(opts, function (err, sp) { return (err ? reject(err) : resolve(sp)); });
        });
    };
    PromisifiedAMFlowProxy.prototype.putStorageData = function (key, value, options) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._amflow.putStorageData(key, value, options, function (err) { return (err ? reject(err) : resolve()); });
        });
    };
    PromisifiedAMFlowProxy.prototype.getStorageData = function (keys) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._amflow.getStorageData(keys, function (err, values) {
                return (err ? reject(err) : resolve(values));
            });
        });
    };
    PromisifiedAMFlowProxy.prototype.onTick = function (handler) {
        this._amflow.onTick(handler);
    };
    PromisifiedAMFlowProxy.prototype.offTick = function (handler) {
        this._amflow.offTick(handler);
    };
    PromisifiedAMFlowProxy.prototype.onEvent = function (handler) {
        this._amflow.onEvent(handler);
    };
    PromisifiedAMFlowProxy.prototype.offEvent = function (handler) {
        this._amflow.offEvent(handler);
    };
    PromisifiedAMFlowProxy.prototype.sendTick = function (tick) {
        this._amflow.sendTick(tick);
    };
    PromisifiedAMFlowProxy.prototype.sendEvent = function (event) {
        this._amflow.sendEvent(event);
    };
    return PromisifiedAMFlowProxy;
}());
exports.PromisifiedAMFlowProxy = PromisifiedAMFlowProxy;
