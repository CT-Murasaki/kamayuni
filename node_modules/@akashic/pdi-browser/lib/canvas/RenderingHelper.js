"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RenderingHelper = void 0;
var g = require("@akashic/akashic-engine");
var SurfaceFactory_1 = require("./SurfaceFactory");
var RenderingHelper;
(function (RenderingHelper) {
    function toTextFromCompositeOperation(operation) {
        var operationText;
        switch (operation) {
            case g.CompositeOperation.SourceAtop:
                operationText = "source-atop";
                break;
            case g.CompositeOperation.Lighter:
                operationText = "lighter";
                break;
            case g.CompositeOperation.Copy:
                operationText = "copy";
                break;
            default:
                operationText = "source-over";
                break;
        }
        return operationText;
    }
    RenderingHelper.toTextFromCompositeOperation = toTextFromCompositeOperation;
    function toCompositeOperationFromText(operationText) {
        var operation;
        switch (operationText) {
            case "source-atop":
                operation = g.CompositeOperation.SourceAtop;
                break;
            case "lighter":
                operation = g.CompositeOperation.Lighter;
                break;
            case "copy":
                operation = g.CompositeOperation.Copy;
                break;
            default:
                operation = g.CompositeOperation.SourceOver;
                break;
        }
        return operation;
    }
    RenderingHelper.toCompositeOperationFromText = toCompositeOperationFromText;
    function drawSystemTextByContext2D(context, text, x, y, maxWidth, fontSize, textAlign, textBaseline, textColor, fontFamily, strokeWidth, strokeColor, strokeOnly) {
        var fontFamilyValue;
        var textAlignValue;
        var textBaselineValue;
        context.save();
        switch (fontFamily) {
            case g.FontFamily.Monospace:
                fontFamilyValue = "monospace";
                break;
            case g.FontFamily.Serif:
                fontFamilyValue = "serif";
                break;
            default:
                fontFamilyValue = "sans-serif";
                break;
        }
        context.font = fontSize + "px " + fontFamilyValue;
        switch (textAlign) {
            case g.TextAlign.Right:
                textAlignValue = "right";
                break;
            case g.TextAlign.Center:
                textAlignValue = "center";
                break;
            default:
                textAlignValue = "left";
                break;
        }
        context.textAlign = textAlignValue;
        switch (textBaseline) {
            case g.TextBaseline.Top:
                textBaselineValue = "top";
                break;
            case g.TextBaseline.Middle:
                textBaselineValue = "middle";
                break;
            case g.TextBaseline.Bottom:
                textBaselineValue = "bottom";
                break;
            default:
                textBaselineValue = "alphabetic";
                break;
        }
        context.textBaseline = textBaselineValue;
        context.lineJoin = "bevel";
        if (strokeWidth > 0) {
            context.lineWidth = strokeWidth;
            context.strokeStyle = strokeColor;
            if (typeof maxWidth === "undefined") {
                context.strokeText(text, x, y);
            }
            else {
                context.strokeText(text, x, y, maxWidth);
            }
        }
        if (!strokeOnly) {
            context.fillStyle = textColor;
            if (typeof maxWidth === "undefined") {
                context.fillText(text, x, y);
            }
            else {
                context.fillText(text, x, y, maxWidth);
            }
        }
        context.restore();
    }
    RenderingHelper.drawSystemTextByContext2D = drawSystemTextByContext2D;
    function createPrimarySurface(width, height, rendererCandidates) {
        return SurfaceFactory_1.SurfaceFactory.createPrimarySurface(width, height, rendererCandidates);
    }
    RenderingHelper.createPrimarySurface = createPrimarySurface;
    function createBackSurface(width, height, platform, rendererCandidates) {
        return SurfaceFactory_1.SurfaceFactory.createBackSurface(width, height, platform, rendererCandidates);
    }
    RenderingHelper.createBackSurface = createBackSurface;
})(RenderingHelper = exports.RenderingHelper || (exports.RenderingHelper = {}));
