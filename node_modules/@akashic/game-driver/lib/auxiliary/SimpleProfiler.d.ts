import { Profiler, ProfilerValueType } from "../Profiler";
import * as g from "@akashic/akashic-engine";
export interface SimpleProfilerParameterObject {
    /**
     * `SimpleProfilerValue` を取得する更新間隔 (ms)。
     * この間隔で `getValueHandler` が呼び出される。
     */
    interval: number;
    /**
     * `SimpleProfilerValue` を通知するコールバック。
     */
    getValueHandler: (value: SimpleProfilerValue) => void;
    /**
     * `getValueHandler` を呼び出す場合に `this` として利用される値。
     */
    getValueHandlerOwner?: any;
    /**
     * このインスタンスが内部的に保持するキャッシュサイズの制限。
     * `DEFAULT_LIMIT` 以上でなければならない。
     */
    limit?: number;
}
export interface SimpleProfilerValue {
    /**
     * ｀interval｀ の区間において、描画がスキップされたフレームの数。
     */
    skippedFrameCount: SimpleProfilerValueResult;
    /**
     * ｀interval｀ の区間における、フレーム描画間隔。
     */
    rawFrameInterval: SimpleProfilerValueResult;
    /**
     * ｀interval｀ の区間における、1秒あたりの描画回数 (FPS)。
     */
    framePerSecond: SimpleProfilerValueResult;
    /**
     * ｀interval｀ の区間において、フレームの実行に要した時間。
     */
    frameTime: SimpleProfilerValueResult;
    /**
     * ｀interval｀ の区間において、フレームの描画に要した時間。
     */
    renderingTime: SimpleProfilerValueResult;
}
export interface SimpleProfilerValueResult {
    ave: number;
    max: number;
    min: number;
}
export declare class SimpleProfiler implements Profiler {
    static DEFAULT_INTERVAL: number;
    static DEFAULT_LIMIT: number;
    static BACKUP_MARGIN: number;
    _interval: number;
    _limit: number;
    _startTime: number;
    _beforeFlushTime: number;
    _beforeTimes: {
        [type: number]: number;
    };
    _values: {
        [type: number]: {
            time: number;
            value: number;
        }[];
    };
    _calculateProfilerValueTrigger: g.Trigger<SimpleProfilerValue>;
    constructor(param: SimpleProfilerParameterObject);
    time(type: ProfilerValueType): void;
    timeEnd(type: ProfilerValueType): void;
    flush(): void;
    setValue(type: ProfilerValueType, value: number): void;
    /**
     * 現在時刻から、指定した時間までを遡った期間の `SimpleProfilerValue` を取得する。
     */
    getProfilerValue(time: number): SimpleProfilerValue;
    _reset(): void;
    _calculateProfilerValue(type: ProfilerValueType, time: number): SimpleProfilerValueResult;
    _getCurrentTime(): number;
}
