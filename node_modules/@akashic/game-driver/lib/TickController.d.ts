import * as pl from "@akashic/playlog";
import * as amf from "@akashic/amflow";
import * as g from "@akashic/akashic-engine";
import ExecutionMode from "./ExecutionMode";
import { StorageFunc } from "./StorageFunc";
import { Game } from "./Game";
import { EventBuffer } from "./EventBuffer";
import { Clock } from "./Clock";
import { TickBuffer } from "./TickBuffer";
import { TickGenerator } from "./TickGenerator";
import * as sr from "./StorageResolver";
export interface TickControllerParameterObject {
    amflow: amf.AMFlow;
    clock: Clock;
    game: Game;
    eventBuffer: EventBuffer;
    executionMode: ExecutionMode;
    errorHandler?: (err: Error) => void;
    errorHandlerOwner?: any;
}
/**
 * `GameLoop` に流れるTickを管理するクラス。
 *
 * `GameLoop` に対して `TickGenerator` と `AMFlow` を隠蔽し、
 * Active/Passiveに(ほぼ)関係なくTickを扱えるようにする。
 */
export declare class TickController {
    errorTrigger: g.Trigger<any>;
    _buffer: TickBuffer;
    _amflow: amf.AMFlow;
    _clock: Clock;
    _started: boolean;
    _executionMode: ExecutionMode;
    _generator: TickGenerator;
    _storageResolver: sr.StorageResolver;
    constructor(param: TickControllerParameterObject);
    startTick(): void;
    stopTick(): void;
    startTickOnce(): void;
    setNextAge(age: number): void;
    forceGenerateTick(): void;
    getBuffer(): TickBuffer;
    storageFunc(): StorageFunc;
    setExecutionMode(execMode: ExecutionMode): void;
    _stopTriggerOnTick(): boolean;
    _updateGeneratorState(): void;
    _onTickGenerated(tick: pl.Tick): void;
}
