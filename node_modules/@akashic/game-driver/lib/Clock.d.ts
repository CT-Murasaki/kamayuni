import * as pdi from "@akashic/akashic-pdi";
import * as g from "@akashic/akashic-engine";
/**
 * `Clock#frameTrigger` のfire時に渡される値。
 */
export interface ClockFrameTriggerParameterObject {
    /**
     * frameTriggerのfireを強制的に中断するか。
     * frameTriggerは経過時間に応じて複数回連続で呼び出される。
     * この値を真にすると、条件に関わらず連続呼び出しを止めることができる。
     * 初期値は偽。
     */
    interrupt: boolean;
}
export interface ClockParameterObject {
    /**
     * FPS。このクロックが一秒あたりに `frameTrigger` をfireする回数。
     */
    fps: number;
    /**
     * 倍率。
     *
     * この値にNを設定すると、概ね `fps` をN倍したのと同じ動作が得られる。
     * (`fps` をN倍した場合と異なり、 `scaleFactor` は `maxFramePerOnce` の設ける閾値もN倍することに注意。)
     * 指定されなかった場合、1。
     */
    scaleFactor?: number;
    /**
     * この `Clock` の使う `Looper` を生成する `Platform` 。
     */
    platform: pdi.Platform;
    /**
     * `Looper` の1回の呼び出し (raw clock frame) ごとに最大何フレーム進めるか。
     *
     * (このフレーム分進めても経過時間 (deltaTime) を消化しきれない場合、
     * 次回呼び出しまでのウェイト時間として、Looperには負の値が渡される。)
     */
    maxFramePerOnce: number;
    /**
     * 異常値とみなして無視する `Looper` の呼び出し間隔(単位はms)。
     * この時間が経過していた場合、無視して1フレーム時間進んだものと解釈する。
     * 指定されなかった場合、150(`DEFAULT_DELTA_TIME_BROKEN_THRESHOLD`)。
     */
    deltaTimeBrokenThreshold?: number;
    /**
     * 1フレーム時間経過時に呼び出されるコールバック。
     */
    frameHandler?: (arg: ClockFrameTriggerParameterObject) => void;
    /**
     * `frameHandler` の呼び出し時に `this` として使われる値。
     */
    frameHandlerOwner?: any;
}
/**
 * FPS管理用のクロック。
 *
 * `pdi.Looper` の定期または不定期の呼び出しを受け付け、指定されたFPSから求めた
 * 1フレーム分の時間(1フレーム時間)が経過するたびに `frameTrigger` をfireする。
 */
export declare class Clock {
    /**
     * 経過時間先取りの比率。
     *
     * FPSから定まる「1フレーム」の経過時間が経っていなくても、この割合の時間が経過していれば1フレーム分の計算を進めてしまう。
     * その代わりに次フレームまでの所要時間を長くする。
     * 例えば20FPSであれば50msで1フレームだが、50*0.8 = 40ms 時点で1フレーム進めてしまい、次フレームまでの時間を60msにする。
     */
    static ANTICIPATE_RATE: number;
    /**
     * 異常値とみなして無視する `Looper` の呼び出し間隔[ms]のデフォルト値。
     */
    static DEFAULT_DELTA_TIME_BROKEN_THRESHOLD: number;
    /**
     * このクロックが一秒あたりに `frameTrigger' をfireする回数(正確にはこの `scaleFactor` 倍)。
     * この値は参照のために公開される。
     * 外部からのこの値の変更は許容されるが、反映は次の `start()` まで遅延される。
     */
    fps: number;
    /**
     * 倍率。
     *
     * この値にNを設定すると、概ね `fps` をN倍するのと同じ動作が得られる。
     * (`fps` をN倍した場合と異なり、 `scaleFactor` は `maxFramePerOnce` の設ける閾値もN倍することに注意。)
     *
     * 初期値は1。
     * この値は参照のために公開される。この値の変更には `changeScaleFactor()` を用いること。
     */
    scaleFactor: number;
    /**
     * クロックが実行中か。
     * start() された後、stop() されるまでの間、またその時のみ真。
     * 外部からこの値を変更してはならない。
     */
    running: boolean;
    /**
     * 1フレーム時間が経過した時にfireされる `g.Trigger` 。
     */
    frameTrigger: g.Trigger<ClockFrameTriggerParameterObject>;
    /**
     * 1生フレーム時間が経過した場合、一連の `frameTrigger` fireの直後にfireされる `g.Trigger` 。
     *
     * (注意: フレーム(frame)と生フレーム(raw frame)の違いに気をつけること。
     * `Looper` の呼び出しにより、1フレーム時間以上経過した時「1生フレーム時間が経過した」と呼ぶ。
     * 処理遅れなどにより、上述のとおり1生フレーム経過の間に複数フレーム経過することがありうる。)
     */
    rawFrameTrigger: g.Trigger<void>;
    _platform: pdi.Platform;
    _maxFramePerOnce: number;
    _deltaTimeBrokenThreshold: number;
    _totalDeltaTime: number;
    _onLooperCall_bound: (deltaTime: number) => number;
    _looper: pdi.Looper;
    _waitTime: number;
    _waitTimeDoubled: number;
    _waitTimeMax: number;
    _skipFrameWaitTime: number;
    _realMaxFramePerOnce: number;
    constructor(param: ClockParameterObject);
    start(): void;
    stop(): void;
    /**
     * `scaleFactor` を変更する。
     * start()した後にも呼び出せるが、1フレーム以下の経過時間情報はリセットされる点に注意。
     */
    changeScaleFactor(scaleFactor: number): void;
    _onLooperCall(deltaTime: number): number;
    private _updateWaitTimes;
}
