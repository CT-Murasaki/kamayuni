import * as amf from "@akashic/amflow";
import * as pl from "@akashic/playlog";
export interface MemoryAmflowClientParameterObject {
    playId: string;
    putStorageDataSyncFunc?: (key: pl.StorageKey, value: pl.StorageValue, options: any) => void;
    getStorageDataSyncFunc?: (keys: pl.StorageReadKey[]) => pl.StorageData[];
    tickList?: pl.TickList;
    startPoints?: amf.StartPoint[];
}
export interface AmflowDump {
    tickList: pl.TickList;
    startPoints: amf.StartPoint[];
}
export declare class MemoryAmflowClient implements amf.AMFlow {
    /**
     * `writeTick` 権限を持つトークン。
     * この値は authenticate() の挙動以外は変更しない。
     * 他メソッド(sendEvent()など)の呼び出しは(権限に反していても)エラーを起こすとは限らない。
     */
    static TOKEN_ACTIVE: string;
    /**
     * `subscribeTick` 権限を持つトークン。
     * この値は authenticate() の挙動以外は変更しない。
     * 他メソッド(sendTick()など)の呼び出しは(権限に反していても)エラーを起こすとは限らない。
     */
    static TOKEN_PASSIVE: string;
    _playId: string;
    _putStorageDataSyncFunc: (key: pl.StorageKey, value: pl.StorageValue, options: any) => void;
    _getStorageDataSyncFunc: (keys: pl.StorageReadKey[]) => pl.StorageData[];
    _tickHandlers: ((tick: pl.Tick) => void)[];
    _eventHandlers: ((ev: pl.Event) => void)[];
    /**
     * onEvent() 呼び出し前に sendEvent() されたものを保持しておくバッファ。
     */
    _events: pl.Event[];
    _tickList: pl.TickList;
    _startPoints: amf.StartPoint[];
    constructor(param: MemoryAmflowClientParameterObject);
    dump(): AmflowDump;
    open(playId: string, callback?: (error: Error | null) => void): void;
    close(callback?: (error: Error | null) => void): void;
    authenticate(token: string, callback: (error: Error | null, permission?: any) => void): void;
    sendTick(tick: pl.Tick): void;
    onTick(handler: (tick: pl.Tick) => void): void;
    offTick(handler: (tick: pl.Tick) => void): void;
    sendEvent(pev: pl.Event): void;
    onEvent(handler: (pev: pl.Event) => void): void;
    offEvent(handler: (pev: pl.Event) => void): void;
    getTickList(optsOrBegin: number | amf.GetTickListOptions, endOrCallback: number | ((error: Error | null, tickList?: pl.TickList) => void), callback?: (error: Error | null, tickList?: pl.TickList) => void): void;
    putStartPoint(startPoint: amf.StartPoint, callback: (error: Error | null) => void): void;
    getStartPoint(opts: amf.GetStartPointOptions, callback: (error: Error | null, startPoint?: amf.StartPoint) => void): void;
    putStorageData(key: pl.StorageKey, value: pl.StorageValue, options: any, callback: (err: Error | null) => void): void;
    getStorageData(keys: pl.StorageReadKey[], callback: (error: Error | null, values?: pl.StorageData[]) => void): void;
    /**
     * 与えられていたティックリストを部分的に破棄する。
     * @param age ティックを破棄する基準のage(このageのティックも破棄される)
     */
    dropAfter(age: number): void;
}
export declare function _cloneDeep(v: any): any;
