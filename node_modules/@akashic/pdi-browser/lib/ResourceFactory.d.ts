import * as g from "@akashic/akashic-engine";
import { AudioPluginManager } from "./plugin/AudioPluginManager";
import { AudioManager } from "./AudioManager";
import { Platform } from "./Platform";
export interface ResourceFactoryParameterObject {
    audioPluginManager: AudioPluginManager;
    audioManager: AudioManager;
    platform: Platform;
}
export declare class ResourceFactory extends g.ResourceFactory {
    _audioPluginManager: AudioPluginManager;
    _audioManager: AudioManager;
    _rendererCandidates: string[];
    _platform: Platform;
    constructor(param: ResourceFactoryParameterObject);
    createAudioAsset(id: string, assetPath: string, duration: number, system: g.AudioSystem, loop: boolean, hint: g.AudioAssetHint): g.AudioAsset;
    createAudioPlayer(system: g.AudioSystem): g.AudioPlayer;
    createImageAsset(id: string, assetPath: string, width: number, height: number): g.ImageAsset;
    createVideoAsset(id: string, assetPath: string, width: number, height: number, system: g.VideoSystem, loop: boolean, useRealSize: boolean): g.VideoAsset;
    createTextAsset(id: string, assetPath: string): g.TextAsset;
    createScriptAsset(id: string, assetPath: string): g.ScriptAsset;
    createSurface(width: number, height: number): g.Surface;
    createGlyphFactory(fontFamily: g.FontFamily | string | (g.FontFamily | string)[], fontSize: number, baseline?: number, fontColor?: string, strokeWidth?: number, strokeColor?: string, strokeOnly?: boolean, fontWeight?: g.FontWeight): g.GlyphFactory;
    _onAudioAssetDestroyed(asset: g.AudioAsset): void;
}
