"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventBuffer = void 0;
var pdi = require("@akashic/akashic-pdi");
var g = require("@akashic/akashic-engine");
var PointEventResolver_1 = require("./PointEventResolver");
/**
 * AMFlowとPDIから流れ込むイベントを蓄積するバッファ。
 *
 * AMFLowから受信するかどうか、AMFlowに送るかどうかは外部から切り替えることができる。
 * 状態によっては、`_amflow` の認証で `subscribeEvent` と `sendEvent` のいずれかまたは両方の権限を取得している必要がある。
 * 詳細は `setMode()` のコメントを参照。
 */
var EventBuffer = /** @class */ (function () {
    function EventBuffer(param) {
        this._amflow = param.amflow;
        this._isLocalReceiver = true;
        this._isReceiver = false;
        this._isSender = false;
        this._isDiscarder = false;
        this._defaultEventPriority = 0;
        this._buffer = null;
        this._joinLeaveBuffer = null;
        this._localBuffer = null;
        this._filters = null;
        this._unfilteredLocalEvents = [];
        this._unfilteredEvents = [];
        this._unfilteredJoinLeaves = [];
        this._pointEventResolver = new PointEventResolver_1.PointEventResolver({ game: param.game });
        this._onEvent_bound = this.onEvent.bind(this);
    }
    EventBuffer.isEventLocal = function (pev) {
        switch (pev[0 /* Code */]) {
            case 0 /* Join */:
                return pev[5 /* Local */];
            case 1 /* Leave */:
                return pev[3 /* Local */];
            case 2 /* Timestamp */:
                return pev[4 /* Local */];
            case 32 /* Message */:
                return pev[4 /* Local */];
            case 33 /* PointDown */:
                return pev[7 /* Local */];
            case 34 /* PointMove */:
                return pev[11 /* Local */];
            case 35 /* PointUp */:
                return pev[11 /* Local */];
            case 64 /* Operation */:
                return pev[5 /* Local */];
            default:
                throw g.ExceptionFactory.createAssertionError("EventBuffer.isEventLocal");
        }
    };
    /**
     * モードを切り替える。
     *
     * この関数の呼び出す場合、最後に呼び出された _amflow#authenticate() から得た Permission は次の条件を満たさねばならない:
     * * 引数 `param.isReceiver` に真を渡す場合、次に偽を渡すまでの間、 `subscribeEvent` が真であること。
     * * 引数 `param.isSender` に真を渡す場合、次に偽を渡すまでの間、 `sendEvent` が真であること。
     */
    EventBuffer.prototype.setMode = function (param) {
        if (param.isLocalReceiver != null) {
            this._isLocalReceiver = param.isLocalReceiver;
        }
        if (param.isReceiver != null) {
            if (this._isReceiver !== param.isReceiver) {
                this._isReceiver = param.isReceiver;
                if (param.isReceiver) {
                    this._amflow.onEvent(this._onEvent_bound);
                }
                else {
                    this._amflow.offEvent(this._onEvent_bound);
                }
            }
        }
        if (param.isSender != null) {
            this._isSender = param.isSender;
        }
        if (param.isDiscarder != null) {
            this._isDiscarder = param.isDiscarder;
        }
        if (param.defaultEventPriority != null) {
            this._defaultEventPriority = param.defaultEventPriority;
        }
    };
    EventBuffer.prototype.getMode = function () {
        return {
            isLocalReceiver: this._isLocalReceiver,
            isReceiver: this._isReceiver,
            isSender: this._isSender,
            isDiscarder: this._isDiscarder,
            defaultEventPriority: this._defaultEventPriority
        };
    };
    EventBuffer.prototype.onEvent = function (pev) {
        if (EventBuffer.isEventLocal(pev)) {
            if (this._isLocalReceiver && !this._isDiscarder)
                this._unfilteredLocalEvents.push(pev);
            return;
        }
        if (this._isReceiver && !this._isDiscarder) {
            if (pev[0 /* Code */] === 0 /* Join */ || pev[0 /* Code */] === 1 /* Leave */) {
                this._unfilteredJoinLeaves.push(pev);
            }
            else {
                this._unfilteredEvents.push(pev);
            }
        }
        if (this._isSender) {
            if (pev[1 /* Priority */] == null) {
                pev[1 /* Priority */] = this._defaultEventPriority;
            }
            this._amflow.sendEvent(pev);
        }
    };
    EventBuffer.prototype.onPointEvent = function (e) {
        var pev;
        switch (e.type) {
            case 0 /* Down */:
                pev = this._pointEventResolver.pointDown(e);
                break;
            case 1 /* Move */:
                pev = this._pointEventResolver.pointMove(e);
                break;
            case 2 /* Up */:
                pev = this._pointEventResolver.pointUp(e);
                break;
        }
        if (!pev)
            return;
        this.onEvent(pev);
    };
    /**
     * filterを無視してイベントを追加する。
     */
    EventBuffer.prototype.addEventDirect = function (pev) {
        if (EventBuffer.isEventLocal(pev)) {
            if (!this._isLocalReceiver || this._isDiscarder)
                return;
            if (this._localBuffer) {
                this._localBuffer.push(pev);
            }
            else {
                this._localBuffer = [pev];
            }
            return;
        }
        if (this._isReceiver && !this._isDiscarder) {
            if (pev[0 /* Code */] === 0 /* Join */ || pev[0 /* Code */] === 1 /* Leave */) {
                if (this._joinLeaveBuffer) {
                    this._joinLeaveBuffer.push(pev);
                }
                else {
                    this._joinLeaveBuffer = [pev];
                }
            }
            else {
                if (this._buffer) {
                    this._buffer.push(pev);
                }
                else {
                    this._buffer = [pev];
                }
            }
        }
        if (this._isSender) {
            if (pev[1 /* Priority */] == null) {
                pev[1 /* Priority */] = this._defaultEventPriority;
            }
            this._amflow.sendEvent(pev);
        }
    };
    EventBuffer.prototype.readEvents = function () {
        var ret = this._buffer;
        this._buffer = null;
        return ret;
    };
    EventBuffer.prototype.readJoinLeaves = function () {
        var ret = this._joinLeaveBuffer;
        this._joinLeaveBuffer = null;
        return ret;
    };
    EventBuffer.prototype.readLocalEvents = function () {
        var ret = this._localBuffer;
        this._localBuffer = null;
        return ret;
    };
    EventBuffer.prototype.addFilter = function (filter, handleEmpty) {
        if (!this._filters)
            this._filters = [];
        this._filters.push({ func: filter, handleEmpty: !!handleEmpty });
    };
    EventBuffer.prototype.removeFilter = function (filter) {
        if (!this._filters)
            return;
        if (!filter) {
            this._filters = null;
            return;
        }
        for (var i = this._filters.length - 1; i >= 0; --i) {
            if (this._filters[i].func === filter)
                this._filters.splice(i, 1);
        }
    };
    EventBuffer.prototype.processEvents = function () {
        var lpevs = this._unfilteredLocalEvents;
        var pevs = this._unfilteredEvents;
        var joins = this._unfilteredJoinLeaves;
        if (!this._filters) {
            if (lpevs.length > 0) {
                this._unfilteredLocalEvents = [];
                this._localBuffer = this._localBuffer ? this._localBuffer.concat(lpevs) : lpevs;
            }
            if (pevs.length > 0) {
                this._unfilteredEvents = [];
                this._buffer = this._buffer ? this._buffer.concat(pevs) : pevs;
            }
            if (joins.length > 0) {
                this._unfilteredJoinLeaves = [];
                this._joinLeaveBuffer = this._joinLeaveBuffer ? this._joinLeaveBuffer.concat(joins) : joins;
            }
            return;
        }
        if (lpevs.length === 0 && pevs.length === 0 && joins.length === 0) {
            for (var i = 0; i < this._filters.length; ++i) {
                if (!this._filters[i].handleEmpty)
                    continue;
                var gpevs = this._filters[i].func([]);
                if (!gpevs)
                    continue;
                for (var j = 0; j < gpevs.length; ++j) {
                    var pev = gpevs[j];
                    if (EventBuffer.isEventLocal(pev)) {
                        lpevs.push(pev);
                    }
                    else if (pev[0 /* Code */] === 0 /* Join */ || pev[0 /* Code */] === 1 /* Leave */) {
                        joins.push(pev);
                    }
                    else {
                        pevs.push(pev);
                    }
                }
            }
        }
        if (lpevs.length > 0) {
            this._unfilteredLocalEvents = [];
            for (var i = 0; i < this._filters.length; ++i) {
                lpevs = this._filters[i].func(lpevs);
                if (!lpevs)
                    break;
            }
            if (lpevs && lpevs.length > 0)
                this._localBuffer = this._localBuffer ? this._localBuffer.concat(lpevs) : lpevs;
        }
        if (pevs.length > 0) {
            this._unfilteredEvents = [];
            for (var i = 0; i < this._filters.length; ++i) {
                pevs = this._filters[i].func(pevs);
                if (!pevs)
                    break;
            }
            if (pevs && pevs.length > 0)
                this._buffer = this._buffer ? this._buffer.concat(pevs) : pevs;
        }
        if (joins.length > 0) {
            this._unfilteredJoinLeaves = [];
            for (var i = 0; i < this._filters.length && joins && joins.length > 0; ++i) {
                joins = this._filters[i].func(joins);
                if (!joins)
                    break;
            }
            if (joins && joins.length > 0)
                this._joinLeaveBuffer = this._joinLeaveBuffer ? this._joinLeaveBuffer.concat(joins) : joins;
        }
    };
    return EventBuffer;
}());
exports.EventBuffer = EventBuffer;
