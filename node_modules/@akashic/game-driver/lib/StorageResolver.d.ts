import * as pl from "@akashic/playlog";
import * as amf from "@akashic/amflow";
import * as g from "@akashic/akashic-engine";
import * as sf from "./StorageFunc";
import ExecutionMode from "./ExecutionMode";
import StorageOnTick from "./StorageOnTick";
import { Game } from "./Game";
import { TickGenerator } from "./TickGenerator";
import { TickBuffer } from "./TickBuffer";
export interface StorageResolverParameterObject {
    game: Game;
    amflow: amf.AMFlow;
    tickGenerator: TickGenerator;
    tickBuffer: TickBuffer;
    executionMode: ExecutionMode;
    errorHandler?: (err: Error) => void;
    errorHandlerOwner?: any;
}
export interface StorageRequest {
    resolvingAge: number;
    loader: g.StorageLoader;
}
/**
 * ストレージの読み書きを担うクラス。
 * Gameのストレージアクセスはすべてこのクラスが一次受けする(一次受けする関数を提供する)。
 *
 * ただし読み込みに関しては、実際にはこのクラスでは行わない。
 * Activeモードの場合、ストレージから読み込んだデータはTickに乗せる必要がある。
 * このクラスはTickGeneratorにリクエストを通知し、読み込みはTickGeneratorが解決する。
 * Passiveモードやスナップショットからの復元の場合、ストレージのデータは `TickBuffer` で受信したTickから得られる。
 * このクラスは、読み込みリクエストを得られたストレージデータと付き合わせて完了を通知する役割を持つ。
 */
export declare class StorageResolver {
    errorTrigger: g.Trigger<Error>;
    getStorageFunc: sf.StorageGetFunc;
    putStorageFunc: sf.StoragePutFunc;
    requestValuesForJoinFunc: sf.RequestValuesForJoinFunc;
    _game: Game;
    _amflow: amf.AMFlow;
    _tickGenerator: TickGenerator;
    _tickBuffer: TickBuffer;
    _executionMode: ExecutionMode;
    _unresolvedLoaders: {
        [index: number]: g.StorageLoader;
    };
    _unresolvedStorages: {
        [index: number]: pl.StorageData[];
    };
    _onStoragePut_bound: (err: Error | null) => void;
    constructor(param: StorageResolverParameterObject);
    /**
     * ExecutionModeを変更する。
     */
    setExecutionMode(executionMode: ExecutionMode): void;
    _onGotStorageOnTick(storageOnTick: StorageOnTick): void;
    _getStorage(keys: g.StorageKey[], loader: g.StorageLoader, ser?: g.StorageValueStoreSerialization): void;
    _putStorage(key: g.StorageKey, value: g.StorageValue, option: g.StorageWriteOption): void;
    _requestValuesForJoin(keys: g.StorageKey[]): void;
    _onStoragePut(err: Error | null): void;
}
