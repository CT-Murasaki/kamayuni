import * as pl from "@akashic/playlog";
import * as amf from "@akashic/amflow";
import * as g from "@akashic/akashic-engine";
import * as pdi from "@akashic/akashic-pdi";
import LoopMode from "./LoopMode";
import LoopRenderMode from "./LoopRenderMode";
import LoopConfiguration from "./LoopConfiguration";
import ExecutionMode from "./ExecutionMode";
import { Game } from "./Game";
import { EventBuffer } from "./EventBuffer";
import { Clock, ClockFrameTriggerParameterObject } from "./Clock";
import { EventConverter } from "./EventConverter";
import { TickBuffer } from "./TickBuffer";
import { TickController } from "./TickController";
import { Profiler } from "./Profiler";
export interface GameLoopParameterObejct {
    amflow: amf.AMFlow;
    platform: pdi.Platform;
    game: Game;
    eventBuffer: EventBuffer;
    executionMode: ExecutionMode;
    configuration: LoopConfiguration;
    startedAt: number;
    profiler?: Profiler;
    errorHandler?: (err: Error) => void;
    errorHandlerOwner?: any;
}
/**
 * ゲームのメインループ管理クラス。
 * clock frameの度にTickBufferに蓄積されたTickを元にゲームを動かす。
 *
 * start() から stop() までの間、最後に呼び出された _amflow.authenticate() は Permission#readTick を返していなければならない。
 */
export declare class GameLoop {
    static DEFAULT_DELAY_IGNORE_THRESHOLD: number;
    static DEFAULT_SKIP_TICKS_AT_ONCE: number;
    static DEFAULT_SKIP_THRESHOLD: number;
    static DEFAULT_JUMP_TRY_THRESHOLD: number;
    static DEFAULT_JUMP_IGNORE_THRESHOLD: number;
    static DEFAULT_POLLING_TICK_THRESHOLD: number;
    static DEFAULT_DELAY_IGNORE_THERSHOLD: number;
    errorTrigger: g.Trigger<any>;
    running: boolean;
    /**
     * プレイ開始からの時刻。
     * 実時間ではなく、経過フレーム数から計算される仮想的な時間であることに注意。
     * この時間情報を元にタイムスタンプイベントの消化待ちを行う。
     */
    _currentTime: number;
    /**
     * 1フレーム分の時間。FPSの逆数。
     * _currentTime の計算に用いる。
     */
    _frameTime: number;
    /**
     * Replay時の目標時刻関数。
     *
     * 存在する場合、この値を毎フレーム呼び出し、その戻り値を目標時刻として扱う。
     * すなわち、「この関数の戻り値を超えない最大のティック時刻を持つティック」が消化されるよう早送りやスナップショットジャンプを行う。
     */
    _targetTimeFunc: () => number;
    _startedAt: number;
    _targetTimeOffset: number;
    _originDate: number;
    _realTargetTimeOffset: number;
    _delayIgnoreThreshold: number;
    _skipTicksAtOnce: number;
    _skipThreshold: number;
    _jumpTryThreshold: number;
    _jumpIgnoreThreshold: number;
    _pollingTickThreshold: number;
    _playbackRate: number;
    _loopRenderMode: LoopRenderMode;
    _loopMode: LoopMode;
    _amflow: amf.AMFlow;
    _game: Game;
    _eventBuffer: EventBuffer;
    _executionMode: ExecutionMode;
    _sceneTickMode: g.TickGenerationMode;
    _sceneLocalMode: g.LocalTickMode;
    _targetAge: number;
    _waitingStartPoint: boolean;
    _lastRequestedStartPointAge: number;
    _lastRequestedStartPointTime: number;
    _waitingNextTick: boolean;
    _skipping: boolean;
    _lastPollingTickTime: number;
    _clock: Clock;
    _tickController: TickController;
    _eventConverter: EventConverter;
    _tickBuffer: TickBuffer;
    _onGotStartPoint_bound: (err: Error | null, startPoint?: amf.StartPoint) => void;
    constructor(param: GameLoopParameterObejct);
    start(): void;
    stop(): void;
    setNextAge(age: number): void;
    getExecutionMode(): ExecutionMode;
    setExecutionMode(execMode: ExecutionMode): void;
    getLoopConfiguration(): LoopConfiguration;
    setLoopConfiguration(conf: LoopConfiguration): void;
    addTickList(tickList: pl.TickList): void;
    getCurrentTime(): number;
    /**
     * 早送り状態に入る。
     *
     * すべての早回し(1フレームでの複数ティック消費)で早送り状態に入るわけではないことに注意。
     * 少々の遅れはこのクラスが暗黙に早回しして吸収する。
     * 早送り状態は、暗黙の早回しでは吸収しきれない規模の早回しの開始時に通知される。
     * 具体的な値との関連は `skipThreshold` など `LoopConfiguration` のメンバを参照のこと。
     */
    _startSkipping(): void;
    /**
     * 早送り状態を終える。
     */
    _stopSkipping(): void;
    /**
     * Gameの再生速度設定を変える。
     * 実際に再生速度(ティックの消費速度)を決めているのはこのクラスである点に注意。
     */
    _updateGamePlaybackRate(): void;
    _handleSceneChange(): void;
    /**
     * ローカルシーンのフレーム処理。
     *
     * `this._clock` の管理する時間経過に従い、ローカルシーンにおいて1フレーム時間につき1回呼び出される。
     */
    _onLocalFrame(): void;
    _doLocalTick(): void;
    /**
     * 非ローカルシーンのフレーム処理。
     *
     * `this._clock` の管理する時間経過に従い、非ローカルシーンにおいて1フレーム時間につき1回呼び出される。
     */
    _onFrame(frameArg: ClockFrameTriggerParameterObject): void;
    /**
     * 時刻関数が与えられている場合のフレーム処理。
     *
     * 通常ケース (`_onFrameNormal()`) とは主に次の点で異なる:
     *  1. `Replay` 時の実装しか持たない (`Realtime` は時刻関数を使わずとにかく最新ティックを目指すので不要)
     *  2. ローカルティック補間をタイムスタンプに従ってしか行わない
     * 後者は、ティック受信待ちなどの状況で起きるローカルティック補間がなくなることを意味する。
     */
    _onFrameForTimedReplay(frameArg: ClockFrameTriggerParameterObject): void;
    /**
     * 非ローカルシーンの通常ケースのフレーム処理。
     * 時刻関数が与えられていない、またはリプレイでない場合に用いられる。
     */
    _onFrameNormal(frameArg: ClockFrameTriggerParameterObject): void;
    _onGotNextFrameTick(): void;
    _onGotStartPoint(err: Error | null, startPoint?: amf.StartPoint): void;
    _onGameStarted(): void;
    _setLoopRenderMode(mode: LoopRenderMode): void;
    _renderOnRawFrame(): void;
    _onGameRaiseEvent(e: g.Event): void;
    _onGameRaiseTick(es?: g.Event[]): void;
    _onGameOperationPluginOperated(op: g.InternalOperationPluginOperation): void;
    _onPollingTick(): void;
    _startWaitingNextTick(): void;
    _stopWaitingNextTick(): void;
}
