import * as pl from "@akashic/playlog";
import * as amf from "@akashic/amflow";
export interface ReplayAmflowProxyParameterObject {
    amflow: amf.AMFlow;
    tickList: pl.TickList;
    startPoints: amf.StartPoint[];
}
export declare class ReplayAmflowProxy implements amf.AMFlow {
    _amflow: amf.AMFlow;
    _tickList: pl.TickList;
    _startPoints: amf.StartPoint[];
    constructor(param: ReplayAmflowProxyParameterObject);
    /**
     * 与えられていたティックリストを部分的に破棄する。
     * ReplayAmflowProxy の独自メソッド。
     * @param age ティックを破棄する基準のage(このageのティックも破棄される)
     */
    dropAfter(age: number): void;
    open(playId: string, callback?: (error: Error | null) => void): void;
    close(callback?: (error: Error | null) => void): void;
    authenticate(token: string, callback: (error: Error | null, permission?: any) => void): void;
    sendTick(tick: pl.Tick): void;
    onTick(handler: (tick: pl.Tick) => void): void;
    offTick(handler: (tick: pl.Tick) => void): void;
    sendEvent(event: pl.Event): void;
    onEvent(handler: (event: pl.Event) => void): void;
    offEvent(handler: (event: pl.Event) => void): void;
    getTickList(optsOrBegin: number | amf.GetTickListOptions, endOrCallback: number | ((error: Error | null, tickList?: pl.TickList) => void), callback?: (error: Error | null, tickList?: pl.TickList) => void): void;
    putStartPoint(startPoint: amf.StartPoint, callback: (error: Error | null) => void): void;
    getStartPoint(opts: amf.GetStartPointOptions, callback: (error: Error | null, startPoint?: amf.StartPoint) => void): void;
    putStorageData(key: pl.StorageKey, value: pl.StorageValue, options: any, callback: (err: Error | null) => void): void;
    getStorageData(keys: pl.StorageReadKey[], callback: (error: Error | null, values?: pl.StorageData[]) => void): void;
    _sliceTicks(ticks: pl.Tick[], from: number, to: number): pl.Tick[];
}
