import { AMFlow, GetStartPointOptions, GetTickListOptions, Permission, StartPoint } from "@akashic/amflow";
import * as playlog from "@akashic/playlog";
import { PromisifiedAMFlow } from "./PromisifiedAMFlow";
/**
 * 引数に渡された AMFlow 実装の非同期関数を Promise でラップしたクラス
 */
export declare class PromisifiedAMFlowProxy implements PromisifiedAMFlow {
    _amflow: AMFlow;
    constructor(amflow: AMFlow);
    open(playId: string): Promise<void>;
    close(): Promise<void>;
    authenticate(token: string): Promise<Permission | undefined>;
    getTickList(optsOrBegin: number | GetTickListOptions, endOrUndefined?: number): Promise<playlog.TickList | undefined>;
    putStartPoint(startPoint: StartPoint): Promise<void>;
    getStartPoint(opts: GetStartPointOptions): Promise<StartPoint | undefined>;
    putStorageData(key: playlog.StorageKey, value: playlog.StorageValue, options: any): Promise<void>;
    getStorageData(keys: playlog.StorageReadKey[]): Promise<playlog.StorageData[] | undefined>;
    onTick(handler: (tick: playlog.Tick) => void): void;
    offTick(handler: (tick: playlog.Tick) => void): void;
    onEvent(handler: (event: playlog.Event) => void): void;
    offEvent(handler: (event: playlog.Event) => void): void;
    sendTick(tick: playlog.Tick): void;
    sendEvent(event: playlog.Event): void;
}
