"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.TouchHandler = void 0;
var MouseHandler_1 = require("./MouseHandler");
var TouchHandler = /** @class */ (function (_super) {
    __extends(TouchHandler, _super);
    function TouchHandler(inputView, disablePreventDefault) {
        var _this = _super.call(this, inputView, disablePreventDefault) || this;
        _this.onTouchDown = function (e) {
            var touches = e.changedTouches;
            for (var i = 0, len = touches.length; i < len; i++) {
                var touch = touches[i];
                _this.pointDown(touch.identifier, _this.convertToPagePosition(touch));
            }
            if (!_this._disablePreventDefault) {
                e.stopPropagation();
                if (e.cancelable)
                    e.preventDefault();
            }
        };
        _this.onTouchMove = function (e) {
            var touches = e.changedTouches;
            for (var i = 0, len = touches.length; i < len; i++) {
                var touch = touches[i];
                _this.pointMove(touch.identifier, _this.convertToPagePosition(touch));
            }
            if (!_this._disablePreventDefault) {
                e.stopPropagation();
                if (e.cancelable)
                    e.preventDefault();
            }
        };
        _this.onTouchUp = function (e) {
            var touches = e.changedTouches;
            for (var i = 0, len = touches.length; i < len; i++) {
                var touch = touches[i];
                _this.pointUp(touch.identifier, _this.convertToPagePosition(touch));
            }
            if (!_this._disablePreventDefault) {
                e.stopPropagation();
                if (e.cancelable)
                    e.preventDefault();
            }
        };
        return _this;
    }
    TouchHandler.prototype.start = function () {
        _super.prototype.start.call(this);
        this.inputView.addEventListener("touchstart", this.onTouchDown);
        this.inputView.addEventListener("touchmove", this.onTouchMove);
        this.inputView.addEventListener("touchend", this.onTouchUp);
    };
    TouchHandler.prototype.stop = function () {
        _super.prototype.stop.call(this);
        this.inputView.removeEventListener("touchstart", this.onTouchDown);
        this.inputView.removeEventListener("touchmove", this.onTouchMove);
        this.inputView.removeEventListener("touchend", this.onTouchUp);
    };
    TouchHandler.prototype.convertToPagePosition = function (e) {
        // windowの左上を0,0とした時のinputViewのoffsetを取得する
        var bounding = this.inputView.getBoundingClientRect();
        var scale = this.getScale();
        return {
            offsetX: (e.pageX - Math.round(window.pageXOffset + bounding.left)) / scale.x,
            offsetY: (e.pageY - Math.round(window.pageYOffset + bounding.top)) / scale.y
        };
    };
    return TouchHandler;
}(MouseHandler_1.MouseHandler));
exports.TouchHandler = TouchHandler;
