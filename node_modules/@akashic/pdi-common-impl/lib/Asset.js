"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Asset = void 0;
var trigger_1 = require("@akashic/trigger");
/**
 * 各種リソースを表すクラス。
 * 本クラスのインスタンスをゲーム開発者が直接生成することはない。
 * game.jsonによって定義された内容をもとに暗黙的に生成されたインスタンスを、
 * Scene#assets、またはGame#assetsによって取得して利用する。
 */
var Asset = /** @class */ (function () {
    function Asset(id, path) {
        this.id = id;
        this.originalPath = path;
        this.path = this._assetPathFilter(path);
        this.onDestroyed = new trigger_1.Trigger();
    }
    Asset.prototype.destroy = function () {
        this.onDestroyed.fire(this);
        this.id = undefined;
        this.originalPath = undefined;
        this.path = undefined;
        this.onDestroyed.destroy();
        this.onDestroyed = undefined;
    };
    Asset.prototype.destroyed = function () {
        return this.id === undefined;
    };
    /**
     * 現在利用中で解放出来ない `Asset` かどうかを返す。
     * 戻り値は、利用中である場合真、でなければ偽である。
     *
     * 本メソッドは通常 `false` が返るべきである。
     * 例えば `Sprite` の元画像として使われているケース等では、その `Sprite` によって `Asset` は `Surface` に変換されているべきで、
     * `Asset` が利用中で解放出来ない状態になっていない事を各プラットフォームで保障する必要がある。
     *
     * 唯一、例外的に本メソッドが `true` を返すことがあるのは音楽を表す `Asset` である。
     * BGM等はシーンをまたいで演奏することもありえる上、
     * 演奏中のリソースのコピーを常に各プラットフォームに強制するにはコストがかかりすぎるため、
     * 本メソッドは `true` を返し、適切なタイミングで `Asset` が解放されるよう制御する必要がある。
     */
    Asset.prototype.inUse = function () {
        return false;
    };
    /**
     * @private
     */
    Asset.prototype._assetPathFilter = function (path) {
        // 拡張子の補完・読み替えが必要なassetはこれをオーバーライドすればよい。(対応形式が限定されるaudioなどの場合)
        return path;
    };
    return Asset;
}());
exports.Asset = Asset;
