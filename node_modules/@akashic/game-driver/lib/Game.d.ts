import * as g from "@akashic/akashic-engine";
import * as amf from "@akashic/amflow";
import { StorageFunc } from "./StorageFunc";
export interface GameParameterObject {
    configuration: g.GameConfiguration;
    resourceFactory: g.ResourceFactory;
    assetBase: string;
    player: g.Player;
    isSnapshotSaver?: boolean;
    operationPluginViewInfo?: g.OperationPluginViewInfo;
    gameArgs?: any;
    globalGameArgs?: any;
}
export interface GameEventFilterFuncs {
    addFilter: (filter: g.EventFilter, handleEmpty?: boolean) => void;
    removeFilter: (filter?: g.EventFilter) => void;
}
/**
 * Gameクラス。
 *
 * このクラスはakashic-engineに由来するクラスであり、
 * アンダースコアで始まるプロパティ (e.g. _foo) を外部から参照する場合がある点に注意。
 * (akashic-engine においては、_foo は「ゲーム開発者向けでない」ことしか意味しない。)
 */
export declare class Game extends g.Game {
    /**
     * 特定ageへの到達を通知するTrigger。
     * fire時には到達したageが渡される。
     */
    agePassedTrigger: g.Trigger<number>;
    /**
     * GameLoopのスキップ状態の変化を通知するTrigger。
     * 通常状態からスキップ状態に遷移する際にtrue、スキップ状態から通常状態に戻る時にfalseが渡される。
     */
    skippingChangedTrigger: g.Trigger<boolean>;
    /**
     * Gameの続行が断念されたことを通知するTrigger。
     *
     * 現在のバージョンでは、これをfireする方法は `Game#_abortGame()` の呼び出し、または
     * それを引き起こすリトライ不能のアセットエラーだけである。
     * ただしこの `Game#_abortGame()` の仕様は今後変動しうる。
     */
    abortTrigger: g.Trigger<void>;
    player: g.Player;
    raiseEventTrigger: g.Trigger<g.Event>;
    raiseTickTrigger: g.Trigger<g.Event[]>;
    snapshotTrigger: g.Trigger<amf.StartPoint>;
    isSnapshotSaver: boolean;
    _getCurrentTimeFunc: () => number;
    _eventFilterFuncs: GameEventFilterFuncs;
    _notifyPassedAgeTable: {
        [age: number]: boolean;
    };
    _gameArgs: any;
    _globalGameArgs: any;
    constructor(param: GameParameterObject);
    /**
     * 特定age到達時の通知を要求する。
     * @param age 通知を要求するage
     */
    requestNotifyAgePassed(age: number): void;
    /**
     * 特定age到達時の通知要求を解除する。
     * @param age 通知要求を解除するage
     */
    cancelNotifyAgePassed(age: number): void;
    fireAgePassedIfNeeded(): boolean;
    /**
     * `Game` が内部的に利用する時刻取得関数をセットする。
     * このメソッドは `Game#_load()` 呼び出しに先行して呼び出されていなければならない。
     */
    setCurrentTimeFunc(fun: () => number): void;
    /**
     * `Game` のイベントフィルタ関連実装をセットする。
     * このメソッドは `Game#_load()` 呼び出しに先行して呼び出されていなければならない。
     */
    setEventFilterFuncs(funcs: GameEventFilterFuncs): void;
    setStorageFunc(funcs: StorageFunc): void;
    raiseEvent(event: g.Event): void;
    raiseTick(events?: g.Event[]): void;
    addEventFilter(filter: g.EventFilter, handleEmpty?: boolean): void;
    removeEventFilter(filter: g.EventFilter): void;
    shouldSaveSnapshot(): boolean;
    saveSnapshot(gameSnapshot: any, timestamp?: number): void;
    _destroy(): void;
    _restartWithSnapshot(snapshot: any): void;
    _leaveGame(): void;
    _abortGame(): void;
}
