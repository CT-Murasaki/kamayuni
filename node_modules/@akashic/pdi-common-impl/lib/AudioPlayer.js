"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AudioPlayer = void 0;
var trigger_1 = require("@akashic/trigger");
/**
 * サウンド再生を行うクラス。
 *
 * 本クラスのインスタンスは、 `AudioSystem#createPlayer()` によって明示的に、
 * または `AudioAsset#play()` によって暗黙的に生成される。
 * ゲーム開発者は本クラスのインスタンスを直接生成すべきではない。
 */
var AudioPlayer = /** @class */ (function () {
    /**
     * `AudioPlayer` のインスタンスを生成する。
     */
    function AudioPlayer(system) {
        this.onPlay = new trigger_1.Trigger();
        this.onStop = new trigger_1.Trigger();
        this.played = this.onPlay;
        this.stopped = this.onStop;
        this.currentAudio = undefined;
        this.volume = system.volume;
        this._muted = system._muted;
        this._system = system;
    }
    /**
     * `AudioAsset` を再生する。
     *
     * 再生後、 `this.onPlay` がfireされる。
     * @param audio 再生するオーディオアセット
     */
    AudioPlayer.prototype.play = function (audio) {
        this.currentAudio = audio;
        this.onPlay.fire({
            player: this,
            audio: audio
        });
    };
    /**
     * 再生を停止する。
     *
     * 停止後、 `this.onStop` がfireされる。
     * 再生中でない場合、何もしない(`onStop` もfireされない)。
     */
    AudioPlayer.prototype.stop = function () {
        var audio = this.currentAudio;
        if (!audio)
            return;
        this.currentAudio = undefined;
        this.onStop.fire({
            player: this,
            audio: audio
        });
    };
    /**
     * 音声の終了を検知できるか否か。
     * 通常、ゲーム開発者がこのメソッドを利用する必要はない。
     */
    AudioPlayer.prototype.canHandleStopped = function () {
        return true;
    };
    /**
     * 音量を変更する。
     *
     * @param volume 音量。0以上1.0以下でなければならない
     */
    // エンジンユーザが `AudioPlayer` の派生クラスを実装する場合は、
    // `_changeMuted()` などと同様、このメソッドをオーバーライドして実際に音量を変更する処理を行うこと。
    // オーバーライド先のメソッドはこのメソッドを呼びださなければならない。
    AudioPlayer.prototype.changeVolume = function (volume) {
        this.volume = volume;
    };
    /**
     * ミュート状態を変更する。
     *
     * エンジンユーザが `AudioPlayer` の派生クラスを実装する場合は、
     * このメソッドをオーバーライドして実際にミュート状態を変更する処理を行うこと。
     * オーバーライド先のメソッドはこのメソッドを呼びださなければならない。
     *
     * @param muted ミュート状態にするか否か
     * @private
     */
    AudioPlayer.prototype._changeMuted = function (muted) {
        this._muted = muted;
    };
    /**
     * 音量の変更を通知する。
     * @private
     */
    AudioPlayer.prototype._notifyVolumeChanged = function () {
        // AudioPlayerの音量を AudioSystem の音量で上書きしていたため、最終音量が正常に計算できていなかった。
        // 暫定対応として、 changeVolume() に AudioPlayer 自身の音量を渡す事により最終音量の計算を実行させる。
        this.changeVolume(this.volume);
    };
    return AudioPlayer;
}());
exports.AudioPlayer = AudioPlayer;
