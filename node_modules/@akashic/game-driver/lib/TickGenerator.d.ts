import * as pl from "@akashic/playlog";
import * as amf from "@akashic/amflow";
import * as g from "@akashic/akashic-engine";
import StorageOnTick from "./StorageOnTick";
import { EventBuffer } from "./EventBuffer";
import { JoinResolver } from "./JoinResolver";
export interface TickGeneratorParameterObject {
    amflow: amf.AMFlow;
    eventBuffer: EventBuffer;
    errorHandler?: (err: Error) => void;
    errorHandlerOwner?: any;
}
/**
 * `playlog.Tick` の生成器。
 * `next()` が呼ばれる度に、EventBuffer に蓄積されたイベントを集めてtickを生成、`tickTrigger` で通知する。
 */
export declare class TickGenerator {
    tickTrigger: g.Trigger<pl.Tick>;
    gotStorageTrigger: g.Trigger<StorageOnTick>;
    errorTrigger: g.Trigger<Error>;
    _amflow: amf.AMFlow;
    _eventBuffer: EventBuffer;
    _joinResolver: JoinResolver;
    _nextAge: number;
    _storageDataForNext: pl.StorageData[];
    _generatingTick: boolean;
    _waitingStorage: boolean;
    _onGotStorageData_bound: (err: Error | null, sds?: pl.StorageData[]) => void;
    constructor(param: TickGeneratorParameterObject);
    next(): void;
    forceNext(): void;
    startStopGenerate(toGenerate: boolean): void;
    startTick(): void;
    stopTick(): void;
    setNextAge(age: number): void;
    /**
     * 次に生成するtickにstorageDataを持たせる。
     * 取得が完了するまで、次のtickは生成されない。
     */
    requestStorageTick(keys: pl.StorageReadKey[]): number;
    setRequestValuesForJoin(keys: g.StorageKey[]): void;
    _onGotStorageData(err: Error | null, sds?: pl.StorageData[]): void;
}
