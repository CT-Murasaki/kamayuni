import { Promise } from "es6-promise";
import * as amf from "@akashic/amflow";
import * as g from "@akashic/akashic-engine";
import * as pdi from "@akashic/akashic-pdi";
import LoopConfiguration from "./LoopConfiguration";
import DriverConfiguration from "./DriverConfiguration";
import StartPointData from "./StartPointData";
import { Game } from "./Game";
import { EventBuffer } from "./EventBuffer";
import { GameLoop } from "./GameLoop";
import { PdiUtil } from "./PdiUtil";
import { Profiler } from "./Profiler";
export interface GameDriverParameterObject {
    /**
     * ゲーム実行に用いられる環境依存レイヤ。
     */
    platform: pdi.Platform;
    /**
     * プレイヤー。
     * id は `g.Game#selfId` として与えられる値。
     */
    player: g.Player;
    /**
     * エラー通知コールバック。
     */
    errorHandler?: (error: any) => void;
    /**
     * `errorHandler` を呼び出す場合に `this` として利用される値。
     */
    errorHandlerOwner?: any;
}
export interface GameDriverInitializeParameterObject {
    /**
     * GameDriverの動作モード。
     */
    driverConfiguration?: DriverConfiguration;
    /**
     * GameLoopの動作モード。
     */
    loopConfiguration?: LoopConfiguration;
    /**
     * 非表示状態か否か。
     * 初期値は偽。
     *
     * 真である場合、音声などはミュートされる。
     * この値は「GameDriverが認識する自身の表示状態」である。
     * 実際に表示・非表示を制御することはGameDriverのユーザが行わなければならない。
     */
    hidden?: boolean;
    /**
     * game.jsonを読み込むために `Platform#loadConfiguration()` の第一引数として渡す値。
     * 典型的にはgame.jsonのURL。(ただしgame-driver自身は `Platform` に引き渡すだけなので内容には関知しない。URLである必要もない。)
     * 指定された場合、 `Game` が生成される。既存の `Game` がある場合、破棄して作り直される。
     */
    configurationUrl?: string;
    /**
     * `configurationUrl` 内の `definitions` を解決するための基準となるパス。
     */
    configurationBase?: string;
    /**
     * asset読み込みの基準パス。
     */
    assetBase?: string;
    /**
     * Gameの起動時引数。
     * mainスクリプトに `g.GameMainParameterObject#args` として渡される。
     */
    gameArgs?: any;
    /**
     * プレイログに記録される起動時引数。
     * mainスクリプトに `g.GameMainParameterObject#globalArgs` として渡される。
     * この値は `executionMode` が `Active` でないかぎり利用されない。
     */
    globalGameArgs?: any;
    /**
     * 利用するプロファイラー。
     * プロファイラーを利用しない場合、省略すること。
     */
    profiler?: Profiler;
}
export declare class GameDriver {
    errorTrigger: g.Trigger<any>;
    configurationLoadedTrigger: g.Trigger<g.GameConfiguration>;
    gameCreatedTrigger: g.Trigger<Game>;
    _platform: pdi.Platform;
    _loadConfigurationFunc: PdiUtil.LoadConfigurationFunc;
    _player: g.Player;
    _rendererRequirement: pdi.RendererRequirement;
    _playId: string;
    _game: Game;
    _gameLoop: GameLoop;
    _eventBuffer: EventBuffer;
    _openedAmflow: boolean;
    _playToken: string;
    _permission: amf.Permission;
    _hidden: boolean;
    _destroyed: boolean;
    constructor(param: GameDriverParameterObject);
    /**
     * `GameDriver` を初期化する。
     */
    initialize(param: GameDriverInitializeParameterObject, callback: (err?: Error) => void): void;
    /**
     * `GameDriver` の各種状態を変更する。
     *
     * 引数 `param` のうち、省略されなかった値が新たに設定される。
     * `startGame()` によりゲームが開始されていた場合、暗黙に `stopGame()` が行われ、完了後 `startGame()` される。
     */
    changeState(param: GameDriverInitializeParameterObject, callback: (err?: Error) => void): void;
    /**
     * ゲームを開始する。
     * このメソッドの呼び出しは、 `initialize()` の完了後でなければならない。
     */
    startGame(): void;
    /**
     * ゲームを(一時的に)止める。
     *
     * このメソッドの呼び出し後、 `startGame()` が呼び出されるまで、 `Game#tick()` は呼び出されない。
     * Active であればティックの生成が行われず、 Passive であれば受信したティックは蓄積される。
     */
    stopGame(): void;
    /**
     * このドライバが次にティックを生成する場合の、ageの値を設定する。
     * `ExecutionMode.Active` でない場合、動作に影響を与えない。
     * このメソッドの呼び出しは、 `initialize()` の完了後でなければならない。
     *
     * @param age 次に生成されるティックのage
     */
    setNextAge(age: number): void;
    getPermission(): amf.Permission;
    getDriverConfiguration(): DriverConfiguration;
    getLoopConfiguration(): LoopConfiguration;
    getHidden(): boolean;
    /**
     * PDIに対してプライマリサーフェスのリセットを要求する。
     *
     * @param width プライマリサーフェスの幅。
     * @param height プライマリサーフェスの高さ。
     * @param rendererCandidates Rendererのタイプ。
     */
    resetPrimarySurface(width: number, height: number, rendererCandidates?: string[]): void;
    doInitialize(param: GameDriverInitializeParameterObject): Promise<void>;
    destroy(): Promise<void>;
    _doSetDriverConfiguration(dconf: DriverConfiguration): Promise<void>;
    _doCloseAmflow(): Promise<void>;
    _doOpenAmflow(playId: string): Promise<void>;
    _doAuthenticate(playToken: string): Promise<void>;
    _loadConfiguration(configurationUrl: string, assetBase: string, configurationBase: string): Promise<g.GameConfiguration>;
    _putZerothStartPoint(data: StartPointData): Promise<void>;
    _getZerothStartPointData(): Promise<StartPointData>;
    _createGame(conf: g.GameConfiguration, player: g.Player, param: GameDriverInitializeParameterObject): Promise<void>;
    _updateGamePlayId(game: Game): void;
    _assertLive(): void;
    _getCallbackError(err: any): Error | null;
}
