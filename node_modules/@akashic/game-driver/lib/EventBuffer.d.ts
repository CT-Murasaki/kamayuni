import * as pl from "@akashic/playlog";
import { AMFlow } from "@akashic/amflow";
import * as pdi from "@akashic/akashic-pdi";
import * as g from "@akashic/akashic-engine";
import { PointEventResolver } from "./PointEventResolver";
import { Game } from "./Game";
export interface EventBufferMode {
    /**
     * ローカルイベントの受信者であるか。
     * 真である場合、PDI実装などから与えられたローカルイベントを蓄える。
     * 指定されなかった場合、真。歴史的経緯のため他の値と初期値が異なる点に注意。
     */
    isLocalReceiver?: boolean;
    /**
     * 受信者であるか。
     * 真である場合、 `AMFlow#onEvent()` でイベントを受信して蓄える。
     * 指定されなかった場合、偽。
     */
    isReceiver?: boolean;
    /**
     * 送信者であるか。
     * 真である場合、受け取った(非ローカル)イベントを `AMFlow` 経由で送信する。
     * 指定されなかった場合、偽。
     */
    isSender?: boolean;
    /**
     * 受け取ったイベントを削除するかどうか。
     * 真である場合、受け取ったイベントを破棄する。`isReceiver` との差異に注意。
     * `isReceiver` が偽の場合 `AMFlow` 経由で「受信しない」。
     * `(isReceiver && isDiscarder)` の場合「受信するが破棄する」。
     * 指定されなかった場合、偽。
     */
    isDiscarder?: boolean;
    /**
     * 優先度要求が省略されたイベントに与える優先度要求。
     * isSender に真を与える時、指定せねばならない。
     */
    defaultEventPriority?: number;
}
export interface EventBufferParameterObject {
    amflow: AMFlow;
    game: Game;
}
export interface EventFilterEntry {
    func: g.EventFilter;
    handleEmpty: boolean;
}
/**
 * AMFlowとPDIから流れ込むイベントを蓄積するバッファ。
 *
 * AMFLowから受信するかどうか、AMFlowに送るかどうかは外部から切り替えることができる。
 * 状態によっては、`_amflow` の認証で `subscribeEvent` と `sendEvent` のいずれかまたは両方の権限を取得している必要がある。
 * 詳細は `setMode()` のコメントを参照。
 */
export declare class EventBuffer implements pdi.PlatformEventHandler {
    _amflow: AMFlow;
    _isLocalReceiver: boolean;
    _isReceiver: boolean;
    _isSender: boolean;
    _isDiscarder: boolean;
    _defaultEventPriority: number;
    _buffer: pl.Event[];
    _joinLeaveBuffer: pl.Event[];
    _localBuffer: pl.Event[];
    _filters: EventFilterEntry[];
    _unfilteredLocalEvents: pl.Event[];
    _unfilteredEvents: pl.Event[];
    _unfilteredJoinLeaves: pl.Event[];
    _pointEventResolver: PointEventResolver;
    _onEvent_bound: (pev: pl.Event) => void;
    static isEventLocal(pev: pl.Event): boolean;
    constructor(param: EventBufferParameterObject);
    /**
     * モードを切り替える。
     *
     * この関数の呼び出す場合、最後に呼び出された _amflow#authenticate() から得た Permission は次の条件を満たさねばならない:
     * * 引数 `param.isReceiver` に真を渡す場合、次に偽を渡すまでの間、 `subscribeEvent` が真であること。
     * * 引数 `param.isSender` に真を渡す場合、次に偽を渡すまでの間、 `sendEvent` が真であること。
     */
    setMode(param: EventBufferMode): void;
    getMode(): EventBufferMode;
    onEvent(pev: pl.Event): void;
    onPointEvent(e: pdi.PointEvent): void;
    /**
     * filterを無視してイベントを追加する。
     */
    addEventDirect(pev: pl.Event): void;
    readEvents(): pl.Event[];
    readJoinLeaves(): pl.Event[];
    readLocalEvents(): pl.Event[];
    addFilter(filter: g.EventFilter, handleEmpty?: boolean): void;
    removeFilter(filter?: g.EventFilter): void;
    processEvents(): void;
}
